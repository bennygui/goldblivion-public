<?php

/**
 *------
 * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>
 * goldblivion implementation : © Guillaume Benny bennygui@gmail.com
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 */

// Globals
const BLUE_CARD_MARKET_SIZE = 4;
const MAX_PLAYERS = 4;
const MAX_MATERIAL = 4;
const ENDING_SCORE = 10;
const NB_NORMAL_MAIN_ACTION = 2;
const NB_SOLO_MAIN_ACTION = 3;
const SOLO_BOARD_NB_CARD_DOUBLE = 6;

function nbMainAction()
{
    if (isGameSolo()) {
        return NB_SOLO_MAIN_ACTION;
    } else {
        return NB_NORMAL_MAIN_ACTION;
    }
}

// States

// States: Player setup
const STATE_PLAYER_SETUP_CHOOSE_NOBLE = 'STATE_PLAYER_SETUP_CHOOSE_NOBLE';
const STATE_PLAYER_SETUP_CHOOSE_NOBLE_ID = 1000;
const STATE_PLAYER_SETUP_NEXT = 'STATE_PLAYER_SETUP_NEXT';
const STATE_PLAYER_SETUP_NEXT_ID = 1001;

// States: Round
const STATE_ROUND_START = 'STATE_ROUND_START';
const STATE_ROUND_START_ID = 2000;
const STATE_ROUND_PRODUCTION = 'STATE_ROUND_PRODUCTION';
const STATE_ROUND_PRODUCTION_ID = 2001;
const STATE_ROUND_NEXT_PLAYER = 'STATE_ROUND_NEXT_PLAYER';
const STATE_ROUND_NEXT_PLAYER_ID = 2002;
const STATE_ROUND_CHOOSE_CARD_DEVELOP = 'STATE_ROUND_CHOOSE_CARD_DEVELOP';
const STATE_ROUND_CHOOSE_CARD_DEVELOP_ID = 2003;
const STATE_ROUND_CHOOSE_CARD_TO_DESTROY = 'STATE_ROUND_CHOOSE_CARD_TO_DESTROY';
const STATE_ROUND_CHOOSE_CARD_TO_DESTROY_ID = 2006;
const STATE_ROUND_NEXT_PLAYER_POST = 'STATE_ROUND_NEXT_PLAYER_POST';
const STATE_ROUND_NEXT_PLAYER_POST_ID = 2007;

// States: Player Action
const STATE_PLAYER_ACTION_START = 'STATE_PLAYER_ACTION_START';
const STATE_PLAYER_ACTION_START_ID = 3000;
const STATE_PLAYER_ACTION_LOOP = 'STATE_PLAYER_ACTION_LOOP';
const STATE_PLAYER_ACTION_LOOP_ID = 3001;
const STATE_PLAYER_ACTION_CHOOSE_ACTION = 'STATE_PLAYER_ACTION_CHOOSE_ACTION';
const STATE_PLAYER_ACTION_CHOOSE_ACTION_ID = 3002;

// States: Ability Activation
const STATE_ABILITY_ACTIVATION_ENTER = 'STATE_ABILITY_ACTIVATION_ENTER';
const STATE_ABILITY_ACTIVATION_ENTER_ID = 4000;
const STATE_ABILITY_ACTIVATION_INSTANT = 'STATE_ABILITY_ACTIVATION_INSTANT';
const STATE_ABILITY_ACTIVATION_INSTANT_ID = 4002;
const STATE_ABILITY_ACTIVATION_INTERACTIVE_LOOP = 'STATE_ABILITY_ACTIVATION_INTERACTIVE_LOOP';
const STATE_ABILITY_ACTIVATION_INTERACTIVE_LOOP_ID = 4003;

const STATE_ABILITY_ACTIVATION_INTERACTIVE_DESTROY = 'STATE_ABILITY_ACTIVATION_INTERACTIVE_DESTROY';
const STATE_ABILITY_ACTIVATION_INTERACTIVE_DESTROY_ID = 4004;
const STATE_ABILITY_ACTIVATION_INTERACTIVE_GAIN_RED = 'STATE_ABILITY_ACTIVATION_INTERACTIVE_GAIN_RED';
const STATE_ABILITY_ACTIVATION_INTERACTIVE_GAIN_RED_ID = 4005;
const STATE_ABILITY_ACTIVATION_INTERACTIVE_GAIN_BLUE = 'STATE_ABILITY_ACTIVATION_INTERACTIVE_GAIN_BLUE';
const STATE_ABILITY_ACTIVATION_INTERACTIVE_GAIN_BLUE_ID = 4006;
const STATE_ABILITY_ACTIVATION_INTERACTIVE_REACTIVATE_HUMANOID = 'STATE_ABILITY_ACTIVATION_INTERACTIVE_REACTIVATE_HUMANOID';
const STATE_ABILITY_ACTIVATION_INTERACTIVE_REACTIVATE_HUMANOID_ID = 4007;
const STATE_ABILITY_ACTIVATION_INTERACTIVE_REACTIVATE_BUILDING = 'STATE_ABILITY_ACTIVATION_INTERACTIVE_REACTIVATE_BUILDING';
const STATE_ABILITY_ACTIVATION_INTERACTIVE_REACTIVATE_BUILDING_ID = 4008;

const STATE_ABILITY_ACTIVATION_EXIT = 'STATE_ABILITY_ACTIVATION_EXIT';
const STATE_ABILITY_ACTIVATION_EXIT_ID = 4999;

// States: Combat
const STATE_COMBAT_SELECT_ENEMY = 'STATE_COMBAT_SELECT_ENEMY';
const STATE_COMBAT_SELECT_ENEMY_ID = 5000;
const STATE_COMBAT_INTERACTIVE = 'STATE_COMBAT_INTERACTIVE';
const STATE_COMBAT_INTERACTIVE_ID = 5001;
const STATE_COMBAT_INTERACTIVE_REACTIVATE_RED_CARD = 'STATE_COMBAT_INTERACTIVE_REACTIVATE_RED_CARD';
const STATE_COMBAT_INTERACTIVE_REACTIVATE_RED_CARD_ID = 5003;
const STATE_COMBAT_WIN_OR_LOSE = 'STATE_COMBAT_WIN_OR_LOSE';
const STATE_COMBAT_WIN_OR_LOSE_ID = 5004;
const STATE_COMBAT_LOSE_DESTROY_RED_CARD = 'STATE_COMBAT_LOSE_DESTROY_RED_CARD';
const STATE_COMBAT_LOSE_DESTROY_RED_CARD_ID = 5005;

// State: Solo
const STATE_SOLO_LOST_UNFILLED_MARKET = 'STATE_SOLO_LOST_UNFILLED_MARKET';
const STATE_SOLO_LOST_UNFILLED_MARKET_ID = 6000;
const STATE_SOLO_ENTER = 'STATE_SOLO_ENTER';
const STATE_SOLO_ENTER_ID = 6001;
const STATE_SOLO_CHOOSE_MARKET_ACTIVATION = 'STATE_SOLO_CHOOSE_MARKET_ACTIVATION';
const STATE_SOLO_CHOOSE_MARKET_ACTIVATION_ID = 6002;
const STATE_SOLO_MARKET_ACTIVATION = 'STATE_SOLO_MARKET_ACTIVATION';
const STATE_SOLO_MARKET_ACTIVATION_ID = 6003;
const STATE_SOLO_REVEAL_ENEMY = 'STATE_SOLO_REVEAL_ENEMY';
const STATE_SOLO_REVEAL_ENEMY_ID = 6004;
const STATE_SOLO_DESTROY_ENEMY = 'STATE_SOLO_DESTROY_ENEMY';
const STATE_SOLO_DESTROY_ENEMY_ID = 6005;

// State: End Game
const STATE_PRE_GAME_END = 'STATE_PRE_GAME_END';
const STATE_PRE_GAME_END_ID = 9000;

// Notifications
const NTF_UPDATE_COMPONENTS = 'NTF_UPDATE_COMPONENTS';
const NTF_SHUFFLE_BLUE_DECK = 'NTF_SHUFFLE_BLUE_DECK';
const NTF_SHUFFLE_RED_DECK = 'NTF_SHUFFLE_RED_DECK';
const NTF_UPDATE_COUNTS = 'NTF_UPDATE_COUNTS';
const NTF_UPDATE_NUGGET = 'NTF_UPDATE_NUGGET';
const NTF_UPDATE_MATERIAL = 'NTF_UPDATE_MATERIAL';
const NTF_UPDATE_PASS = 'NTF_UPDATE_PASS';
const NTF_LAST_ROUND = 'NTF_LAST_ROUND';
const NTF_UPDATE_FIRST_PLAYER = 'NTF_UPDATE_FIRST_PLAYER';
const NTF_FLIP_VILLAGE = 'NTF_FLIP_VILLAGE';
const NTF_USE_COMPONENTS = 'NTF_USE_COMPONENTS';
const NTF_ROLL_DICE = 'NTF_ROLL_DICE';
const NTF_DESTROY_DICE = 'NTF_DESTROY_DICE';
const NTF_FLIP_ENEMY = 'NTF_FLIP_ENEMY';
const NTF_SELECT_ENEMY = 'NTF_SELECT_ENEMY';
const NTF_ATTACK_ENEMY = 'NTF_ATTACK_ENEMY';
const NTF_COMBAT_STATUS = 'NTF_COMBAT_STATUS';
const NTF_UPDATE_PLAYER_DEVELOPMENT_TYPE_ID = 'NTF_UPDATE_PLAYER_DEVELOPMENT_TYPE_ID';
const NTF_UPDATE_HAND_ORDER = 'NTF_UPDATE_HAND_ORDER';
const NTF_UPDATE_ROUND = 'NTF_UPDATE_ROUND';
const NTF_UPDATE_SOLO_ACTION_LIST = 'NTF_UPDATE_SOLO_ACTION_LIST';

// Game Options
const GAME_OPTION_SOLO_NOBLE = 'GAME_OPTION_SOLO_NOBLE';
const GAME_OPTION_SOLO_NOBLE_ID = 101;
const GAME_OPTION_SOLO_NOBLE_VALUE_EASY_ARIANE = 0;
const GAME_OPTION_SOLO_NOBLE_VALUE_NORMAL_CHARLES = 1;
const GAME_OPTION_SOLO_NOBLE_VALUE_HARD_BLAZE = 2;
const GAME_OPTION_SOLO_NOBLE_VALUE_HARD_JADE = 3;

function isGameSolo()
{
    $playerMgr = \BX\Action\ActionRowMgrRegister::getMgr('player');
    return ($playerMgr->getPlayerCount() == 1);
}

function gameSoloNoble()
{
    if (!isGameSolo()) {
        return null;
    }
    $soloNobleId = \BX\BGAGlobal\GlobalMgr::getGlobal(GAME_OPTION_SOLO_NOBLE_ID);
    if ($soloNobleId === null) {
        $soloNobleId = GAME_OPTION_SOLO_NOBLE_VALUE_EASY_ARIANE;
    }
    return $soloNobleId;
}

function isGameSoloLostUnfilledMarket()
{
    $gameStateMgr = \BX\Action\ActionRowMgrRegister::getMgr('game_state');
    return $gameStateMgr->isSoloLostUnfilledMarket();
}

const GAME_OPTION_SOLO_STARTING_NOBLE = 'GAME_OPTION_SOLO_STARTING_NOBLE';
const GAME_OPTION_SOLO_STARTING_NOBLE_ID = 102;
const GAME_OPTION_SOLO_STARTING_NOBLE_VALUE_ONE_RANDOM = 0;
const GAME_OPTION_SOLO_STARTING_NOBLE_VALUE_ALL = 1;

// User preferences

// Game Statistics
const STATS_TABLE_NB_ROUND = 'STATS_TABLE_NB_ROUND';

const STATS_PLAYER_GOLD_AT_END = 'STATS_PLAYER_GOLD_AT_END';
const STATS_PLAYER_NUGGET_AT_END = 'STATS_PLAYER_NUGGET_AT_END';
const STATS_PLAYER_MATERIAL_AT_END = 'STATS_PLAYER_MATERIAL_AT_END';
const STATS_PLAYER_ENEMY_TILE_AT_END = 'STATS_PLAYER_ENEMY_TILE_AT_END';
const STATS_PLAYER_CARDS_IN_NUGGET_DEVELOPMENT_AT_END = 'STATS_PLAYER_CARDS_IN_NUGGET_DEVELOPMENT_AT_END';
const STATS_PLAYER_CARDS_IN_MATERIAL_DEVELOPMENT_AT_END = 'STATS_PLAYER_CARDS_IN_MATERIAL_DEVELOPMENT_AT_END';
const STATS_PLAYER_GAINED_NUGGET = 'STATS_PLAYER_GAINED_NUGGET';
const STATS_PLAYER_GAINED_MATERIAL = 'STATS_PLAYER_GAINED_MATERIAL';
const STATS_PLAYER_GAINED_GOLD_FROM_NUGGET = 'STATS_PLAYER_GAINED_GOLD_FROM_NUGGET';
const STATS_PLAYER_GAINED_BLUE_CARD = 'STATS_PLAYER_GAINED_BLUE_CARD';
const STATS_PLAYER_GAINED_RED_CARD = 'STATS_PLAYER_GAINED_RED_CARD';
const STATS_PLAYER_GAINED_MAGIC_TOKEN = 'STATS_PLAYER_GAINED_MAGIC_TOKEN';
const STATS_PLAYER_COMBAT_LOST = 'STATS_PLAYER_COMBAT_LOST';
const STATS_PLAYER_COMBAT_WON = 'STATS_PLAYER_COMBAT_WON';
const STATS_PLAYER_COMBAT_WON_COW = 'STATS_PLAYER_COMBAT_WON_COW';
const STATS_PLAYER_DESTROYED_BLUE_MARKET = 'STATS_PLAYER_DESTROYED_BLUE_MARKET';
const STATS_PLAYER_DESTROYED_RED_MARKET = 'STATS_PLAYER_DESTROYED_RED_MARKET';
const STATS_PLAYER_ICONS_HUMAN = 'STATS_PLAYER_ICONS_HUMAN';
const STATS_PLAYER_ICONS_ELF = 'STATS_PLAYER_ICONS_ELF';
const STATS_PLAYER_ICONS_DWARF = 'STATS_PLAYER_ICONS_DWARF';
const STATS_PLAYER_ICONS_BUILDING = 'STATS_PLAYER_ICONS_BUILDING';

const STATS_PLAYER_SOLO_GOLD_AT_END = 'STATS_PLAYER_SOLO_GOLD_AT_END';
const STATS_PLAYER_SOLO_NUGGET_AT_END = 'STATS_PLAYER_SOLO_NUGGET_AT_END';
const STATS_PLAYER_SOLO_MATERIAL_AT_END = 'STATS_PLAYER_SOLO_MATERIAL_AT_END';
const STATS_PLAYER_SOLO_ENEMY_TILE_AT_END = 'STATS_PLAYER_SOLO_ENEMY_TILE_AT_END';
const STATS_PLAYER_SOLO_CARDS_HUMAN = 'STATS_PLAYER_SOLO_CARDS_HUMAN';
const STATS_PLAYER_SOLO_CARDS_ELF = 'STATS_PLAYER_SOLO_CARDS_ELF';
const STATS_PLAYER_SOLO_CARDS_DWARF = 'STATS_PLAYER_SOLO_CARDS_DWARF';
const STATS_PLAYER_SOLO_CARDS_BUILDING = 'STATS_PLAYER_SOLO_CARDS_BUILDING';
